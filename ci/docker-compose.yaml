version: '3'

services:
  drone-server:
    image: drone/drone:2
    container_name: drone-server
    networks:
      - dronenet        # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信
    ports:
      - '80:80'      # Web管理面板的入口 PROTO=http  时使用该端口
      - '10443:443'     # Web管理面板的入口 PROTO=https 时使用该端口
      - '9000:9000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock   # docker.sock [1]
      - /var/data/drone/:/var/lib/drone             # drone数据存放路径
    environment:
      DRONE_AGENTS_ENABLED: "true"                   # 使用Runner
      DRONE_GITHUB_SERVER: https://github.com                    # github的地址
      DRONE_GITHUB_CLIENT_ID: ${DRONE_GITHUB_CLIENT_ID}          # 上一步获得的ClientID
      DRONE_GITHUB_CLIENT_SECRET: ${DRONE_GITHUB_CLIENT_SECRET}  # 上一步获得的ClientSecret
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}                      # RPC秘钥	[2]
      DRONE_SERVER_HOST: ${DRONE_SERVER_HOST}                    # RPC域名(在一个实例上可以不用)
#      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}                  # git webhook使用的协议(我建议http)
      DRONE_OPEN: "true"                                           # 开发drone
#      - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite     # 数据库文件
#      - DRONE_DATABASE_DRIVER=sqlite3                             # 数据库驱动，我这里选的sqlite
      DRONE_DEBUG: "true"                                          # 调试相关，部署的时候建议先打开
      DRONE_LOGS_DEBUG: "true"                                     # 调试相关，部署的时候建议先打开
      DRONE_LOGS_TRACE: "true"                                     # 调试相关，部署的时候建议先打开
      DRONE_USER_CREATE: username:ekko100120,admin:true           # 初始管理员用户
      TZ: Asia/Shanghai                                          # 时区
    restart: always
  drone-agent:
    image: drone/agent:latest
    container_name: drone-agent
    ports:
      - '3000:3000'
    networks:
      - dronenet     # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # docker.sock [1]
    environment:
      - DRONE_RPC_SERVER=http://${DRONE_SERVER_HOST}  # RPC服务地址
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}  # RPC秘钥
      - DRONE_RPC_PROTO=http    # RPC协议(http || https)
      - DRONE_RUNNER_CAPACITY=2               # 最大并发执行的 pipeline 数
      - DRONE_DEBUG=true                      # 调试相关，部署的时候建议先打开
      - DRONE_LOGS_DEBUG=true                 # 调试相关，部署的时候建议先打开
      - DRONE_LOGS_TRACE=true                 # 调试相关，部署的时候建议先打开
      - TZ=Asia/Shanghai
    restart: always
networks:
  dronenet:
    driver: bridge # 让drone-server和drone-agent处于一个网络中，方便进行RPC通信
